.class public auto ansi beforefieldinit LoggerIsEnabledScenarios
       extends [netstandard]System.Object
{
  .method public hidebysig instance void 
          LogTrace_In_Exception_With_Before_And_After_Code() cil managed
  {
    // Code size       53 (0x35)
    .maxstack  3
    IL_0000:  ldarg.0
    IL_0001:  call       instance void LoggerIsEnabledScenarios::CodeBefore()
    .try
    {
      IL_0006:  ldarg.0
      IL_0007:  ldfld      class [Microsoft.Extensions.Logging.Abstractions]Microsoft.Extensions.Logging.ILogger LoggerIsEnabledScenarios::_logger
      IL_000c:  ldc.i4.0
      IL_000d:  callvirt   instance bool [Microsoft.Extensions.Logging.Abstractions]Microsoft.Extensions.Logging.ILogger::IsEnabled(valuetype [Microsoft.Extensions.Logging.Abstractions]Microsoft.Extensions.Logging.LogLevel)
      IL_0012:  brfalse.s  IL_0029
      IL_0014:  ldarg.0
      IL_0015:  ldfld      class [Microsoft.Extensions.Logging.Abstractions]Microsoft.Extensions.Logging.ILogger LoggerIsEnabledScenarios::_logger
      IL_001a:  ldstr      "message"
      IL_001f:  call       !!0[] [netstandard]System.Array::Empty<object>()
      IL_0024:  call       void [Microsoft.Extensions.Logging.Abstractions]Microsoft.Extensions.Logging.LoggerExtensions::LogTrace(class [Microsoft.Extensions.Logging.Abstractions]Microsoft.Extensions.Logging.ILogger,
                                                                                                                                   string,
                                                                                                                                   object[])
      IL_0029:  leave.s    IL_002e
    }  // end .try
    catch [netstandard]System.Exception 
    {
      IL_002b:  pop
      IL_002c:  leave.s    IL_002e
    }  // end handler
    IL_002e:  ldarg.0
    IL_002f:  call       instance void LoggerIsEnabledScenarios::CodeAfter()
    IL_0034:  ret
  } 
}
