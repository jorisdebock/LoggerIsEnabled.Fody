.class public auto ansi beforefieldinit LoggerIsEnabledSenarios
       extends [netstandard]System.Object
{
  .method public hidebysig instance void 
          LogTrace_In_Exception_With_After_Code_In_Try() cil managed
  {
    // Code size       47 (0x2f)
    .maxstack  3
    .try
    {
      IL_0000:  ldarg.0
      IL_0001:  ldfld      class [Microsoft.Extensions.Logging.Abstractions]Microsoft.Extensions.Logging.ILogger LoggerIsEnabledSenarios::_logger
      IL_0006:  ldc.i4.0
      IL_0007:  callvirt   instance bool [Microsoft.Extensions.Logging.Abstractions]Microsoft.Extensions.Logging.ILogger::IsEnabled(valuetype [Microsoft.Extensions.Logging.Abstractions]Microsoft.Extensions.Logging.LogLevel)
      IL_000c:  brfalse.s  IL_0023
      IL_000e:  ldarg.0
      IL_000f:  ldfld      class [Microsoft.Extensions.Logging.Abstractions]Microsoft.Extensions.Logging.ILogger LoggerIsEnabledSenarios::_logger
      IL_0014:  ldstr      "message"
      IL_0019:  call       !!0[] [netstandard]System.Array::Empty<object>()
      IL_001e:  call       void [Microsoft.Extensions.Logging.Abstractions]Microsoft.Extensions.Logging.LoggerExtensions::LogTrace(class [Microsoft.Extensions.Logging.Abstractions]Microsoft.Extensions.Logging.ILogger,
                                                                                                                                   string,
                                                                                                                                   object[])
      IL_0023:  ldarg.0
      IL_0024:  call       instance void LoggerIsEnabledSenarios::CodeAfter()
      IL_0029:  leave.s    IL_002e
    }  // end .try
    catch [netstandard]System.Exception 
    {
      IL_002b:  pop
      IL_002c:  leave.s    IL_002e
    }  // end handler
    IL_002e:  ret
  } // end of method LoggerIsEnabledSenarios::LogTrace_In_Exception_With_After_Code_In_Try
} // end of class LoggerIsEnabledSenarios